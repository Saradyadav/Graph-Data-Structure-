#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;
int minValueVertex(vector<bool> processed , vector<int> value , int v){
	int m = INT_MAX;
	int vertex = 0;
	for(int i = 0; i < v; i++){
		if(value[i] < m && processed[i] == false)
		{
			vertex = i;
			m = value[i];
		}
	}
	return vertex;
}
void dijkhstra(vector<vector<int>> graph , int v){
	int parent[v];
	vector<int> value(v , INT_MAX);
	vector<bool> processed(v , false);
	value[0] = 0;
	parent[0] = -1;
	for(int i = 0 ; i <v-1 ; i++){
		int u = minValueVertex(processed , value , v);
		processed[u]  = true;
		for(int j = 0 ; j < v; j++){
			if(graph[u][j] != 0 && value[u] != INT_MAX && processed[j] == false && value[u] + graph[u][j] < value[j])
			{
				value[j] = value[u] + graph[u][j];
				parent[j] = u;
			}
		}
	}
	for(int i = 0; i < v; i++)
		cout<<parent[i]<<" ";
}

int main() {
	int v = 6;
	vector<vector<int>> graph = { {0,1,4,0,0,0},
						{1,0,4,2,7,0},
						{4,4,0,3,5,0},
						{0,2,3,0,4,6},
						{0,7,5,4,0,7},
						{0,0,0,6,7,0}
					};
		dijkhstra(graph , v);

	return 0;
}
